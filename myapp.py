# -*- coding: utf-8 -*-
"""tubes visdat.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-d18rgF1cBQp-T4UIoY-vukUVPI6JfGI

# Import Data
"""

# Bokeh libraries
import pandas as pd
from bokeh.io import curdoc
from bokeh.io import show, output_file
from bokeh.models import ColumnDataSource
from datetime import datetime
from bokeh.plotting import figure, show
from bokeh.models import HoverTool
from bokeh.models import Select
from bokeh.models.widgets import Tabs, Panel
from bokeh.layouts import widgetbox, row


# Output to file
output_file('tubes.html', 
            title='tubes')

# Read the csv files
df = pd.read_csv('covid_19_indonesia_time_series_all.csv')
df.head()

df.info()

df['dates']=pd.to_datetime(df['date'], format='%m/%d/%Y')
df.info()

# Isolate the data for the Rockets and Warriors
datas = pd.DataFrame(df[['dates','total_cases','total_deaths','total_recovered']])
#tested = pd.DataFrame(df['acc_tested'])
#positive = pd.DataFrame(df['acc_confirmed'])
#negative = pd.DataFrame(df['acc_negative'])

# Create a ColumnDataSource object for each team
cds = ColumnDataSource(datas)
#tested_cds = ColumnDataSource(tested)
#positive_cds = ColumnDataSource(positive)
#negative_cds = ColumnDataSource(negative)

def case(cds):
  # Create and configure the figure
  case_fig = figure(x_axis_type='datetime',
               plot_height=700, plot_width=900,
               title='Total Cases of COVID 19 in Indonesia',
               x_axis_label='Date', y_axis_label='Value')
  
  # Format the tooltip
  tooltips = [
              ('Total Cases','@total_cases'),
              ('Date','@date'),
              ('Location', '@location'),
              ('New Cases', '@new_cases'),
              ('New Death', '@new_deaths'),
              ('New Recovery', '@new_recovered'),
              ('New Active Cases',	'@new_active_cases'),
              ('Population', '@population')
            ]
  # Add the HoverTool to the figure
  case_fig.add_tools(HoverTool(tooltips=tooltips))
  

  # Render the race as step lines
  case_fig.line('dates', 'total_cases', source=cds, color='red')
  case_fig.diamond(
              'dates',
              'total_cases',
              source=cds,
              fill_alpha=0.9,
              size=6,
              hover_fill_color='yellow',
              hover_fill_alpha=1,
              color='pink'
          )

  # Move the legend to the upper left corner
  case_fig.legend.location = 'top_left'

  # Show the plot
  return case_fig

def death(cds):
  # Create and configure the figure
  death_fig = figure(x_axis_type='datetime',
               plot_height=700, plot_width=900,
               title='Total Deaths of COVID 19 in Indonesia',
               x_axis_label='Date', y_axis_label='Value')
  
  # Format the tooltip
  tooltips = [
              ('Total Deaths','@total_deaths'),
              ('Date','@date'),
              ('Location', '@location'),
              ('New Cases', '@new_cases'),
              ('New Death', '@new_deaths'),
              ('New Recovery', '@new_recovered'),
              ('New Active Cases',	'@new_active_cases'),
              ('Population', '@population')
            ]
  # Add the HoverTool to the figure
  death_fig.add_tools(HoverTool(tooltips=tooltips))
  

  # Render the race as step lines
  death_fig.line('dates', 'total_deaths', source=cds, color='green')
  death_fig.diamond(
              'dates',
              'total_deaths',
              source=cds,
              fill_alpha=0.9,
              size=6,
              hover_fill_color='yellow',
              hover_fill_alpha=1,
              color='pink'
          )

  # Move the legend to the upper left corner
  death_fig.legend.location = 'top_left'

  # Show the plot
  return death_fig

def recover(cds):
  # Create and configure the figure
  recover_fig = figure(x_axis_type='datetime',
               plot_height=700, plot_width=900,
               title='Total Recovered of COVID 19 in Indonesia',
               x_axis_label='Date', y_axis_label='Value')
  
  # Format the tooltip
  tooltips = [
              ('Total Recovered','@total_recovered'),
              ('Date','@date'),
              ('Location', '@location'),
              ('New Cases', '@new_cases'),
              ('New Death', '@new_deaths'),
              ('New Recovery', '@new_recovered'),
              ('New Active Cases',	'@new_active_cases'),
              ('Population', '@population')
            ]
  # Add the HoverTool to the figure
  recover_fig.add_tools(HoverTool(tooltips=tooltips))
  

  # Render the race as step lines
  recover_fig.line('dates', 'total_recovered', source=cds, color='blue')
  recover_fig.diamond(
              'dates',
              'total_recovered',
              source=cds,
              fill_alpha=0.9,
              size=6,
              hover_fill_color='yellow',
              hover_fill_alpha=1,
              color='pink'
          )

  # Move the legend to the upper left corner
  recover_fig.legend.location = 'top_left'

  # Show the plot
  return recover_fig

def update_plot(attr, old, new):
  island = y_select.value

  newdf = df[df['island']==island]
  newcds = ColumnDataSource(newdf)
  
  cds.data.update(newcds.data)
  return island

# Make dropdown menu y axis
opt=list(df['island'].value_counts().index)
opt.sort()

# Create a dropdown Select widget for the y data: y_select
y_select = Select(
    options=opt,
    value='Jawa',
    title='Island'
)
# Attach the update_plot callback to the 'value' property of y_select
y_select.on_change('value', update_plot)

#controls=column(y_select)    
island=y_select.value

newdf = df[df['island']==island]
cds = ColumnDataSource(newdf)

# Create layout and add to current document
layout_case = row(widgetbox(y_select), case(cds))
layout_death = row(widgetbox(y_select), death(cds))
layout_recover = row(widgetbox(y_select), recover(cds))

panel_case=Panel(child=layout_case, title="Total Cases")
panel_death=Panel(child=layout_death, title="Total Death")
panel_recover=Panel(child=layout_recover, title="Total Recovered")

tabs=Tabs(tabs=[panel_case, panel_death, panel_recover])
curdoc().add_root(tabs)
